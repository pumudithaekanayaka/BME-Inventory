<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAF6RAABekQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuX1cAbl9XAG5fVwFuX1cBfW5IAGlbXABqV1oAYmNnACu0
        vAA3oaoAN6GqACu0vABiY2cAaldaAGlbXAB9bkgAbl9XAW5fVwFuX1cAbl9XAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQG7/AEBu
        /wJBbP8AQWz/Ij5x/60+cf+tQWz/IkFs/wBAbv8CQG7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbl9XAm5fVwBuX1c0bl9X2G5f
        V9duX1fXbl9Y2HBeTdRJbePrR2PI/0djyP9JbePrcF5N1G5fWNhuX1fXbl9X125fV9huX1c0bl9XAG5f
        VwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuX1cDbl9XAG5f
        V0JuX1f9bl9X925fV/duX1j4cF5Q90lt5fxJYLf8SWC3/Elt5fxwXlD3bl9Y+G5fV/duX1f3bl9X/W5f
        V0JuX1cAbl9XAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG5f
        VwBuX1cAbl9XAG5fVwtuX1cQbl9XD2dhbRG7TQAGSGncQkNq7PtDauz8SGncQrxNAAZnYW0Rbl9XD25f
        VxBuX1cLbl9XAG5fVwBuX1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAbl9XAG5fVwBuX1cBbl9XAG5fVwBuX1cAXEc2AV9CIQBjPQcFWkg+6FpIPuhjPQcFX0IhAFxH
        NgFuX1cAbl9XAG5fVwBuX1cBbl9XAG5fVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABuX1cAbl9XAG5fVwBuX1cBbl9XAW5fVwFlV1MCOjhfAFNVfwdaSUDoWklA6FNV
        fwc6OF8AZVdTAm5fVwFuX1cBbl9XAW5fVwBuX1cAbl9XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpJQAFbSD8AXEc9BVpJ
        QOhaSUDoXEc9BVtIPwBaSUABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWklAAVtI
        PwBbSD8FWklA6FpJQOhbSD8FW0g/AFpJQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA2sYmANrGJgDaxiYA2sYmANrGJgLaxiYD2sYmA9rGJgPaxiYD2sYmA9rG
        JgPDsCsE//8DAY98NQhcS0DoXEtA6JB8NAj//wQBxLArBNrGJgPaxiYD2sYmA9rGJgPaxiYD2sYmA9rG
        JgLaxiYA2sYmANrGJgDaxyYAAAAAANrGJgDaxiYA2sYmANrGJgLaxiYC2sYmANrGJgDaxicAAAAAAAAA
        AAAAAAAAAAAAAFJBQQFSP0EAUT1BBVJBQuhSQULoUT1BBVE/QQBSQUEBAAAAAAAAAAAAAAAAAAAAANrH
        JwDaxiYA2sYmANrGJgLaxiYC2sYmANrGJgDaxiYA2sYmANrGJgDaxiYC2sYmAdrGJgDaxiYi2sYmR9rG
        JkzaxiZL2sYmTNrGJkzaxiZM2cUmTdzIJkvUwCdQg3E474RyOO/VwSdR3MgmTNnFJk/axiZP2sYmT9rG
        Jk/axiZP2sYmUNrGJkvaxiYl3swwANrGJgHaxiYC2sYmANrGJgDaxiYA2sYmAtrGJgDaxiYr2sYmutrG
        Jvvaxib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/gzCX/4Mwl/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv3axia+2sYmL9rGJgDaxiYC2sYmANrGJgLaxiYA2sYmP9rG
        JvTaxib/2sYm/trGJv3axib82sYm/NrGJvzaxib82sYm/NrGJvzaxib82sYm/NnFJv/ZxSb/2sYm/NrG
        Jvzaxib82sYm/NrGJvzaxib82sYm/NrGJvzaxib82sYm/trGJv/axib22sYmQtrGJgDaxiYD2sYmANrG
        JhDaxibg2sYm/9rGJvraxib+2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm+trGJv/axibi2sYmEdrG
        JgDaxiYA2sYma9rGJv/axib62sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm+trG
        Jv/axiZs2sYmANrGJgDaxiap2sYm/9rGJvzaxib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib82sYm/9rGJqraxiYA2sYmANrGJrraxib/2sYm/NrGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJvzaxib/2sYmutrGJgDaxiYA2sYmo9rGJv/axib82sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/NrGJv/axial2sYmANrGJgDaxiZe2sYm/9rGJvraxib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib62sYm/9rGJmPaxiYA2sYmANrGJgbaxibP2sYm/9rG
        Jvnaxib92sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib72sYm+drGJv/axibW2sYmCtrGJgDaxiYC2sYmANrG
        Jijaxibi2sYm/9rGJv7axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv3axib/2sYm39rGJizaxiYA2sYmAtrG
        JgDaxiYC2sYmANrGJhbaxiaV2sYm6NrGJv7axif/2cUi/+XXZf/gz0f/2cQg/9rGJ//axib/2sYm/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib52sYmqtrGJmvaxiYQ2sYmANrG
        JgLaxiYA2sYmANrGJgDaxiYC2sYmAtrGJgDaxiYH2sYmOtrGJ/TZxSH/6Npy/uPUWf/ZxB7/2sYo/9rG
        Jv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib+2sYm/9rGJuDaxiYI2sYmANrG
        JgLaxiYC2sYmANrGJgDaxiYA2sYmANrGJgDaxiYC2sYmBNrGJgDaxiYH2sYo39nEH//j01j96Ntz/9nF
        IP/axif/2sYm/9rGJv/axib/2sYm/9rGJv/axib/2sYm/9rGJv/axib+2sYm/drGJvjaxib/2sYmqNrG
        JgDaxiYH2sYmAdrGJgDaxiYA2sYmAAAAAADaxSUA2sYmANrLKgDaxiYA2sYmBNrGJgDaxieq2sUk/9zJ
        MPzr34T/4dBL/9jDG//axib/2sYn/9rGJv/axib/2sYm/9rGJv/axib/2sYm/trGJv7axib+2sYm/9rG
        Ju7axiYr2sYmANrGJgLaxiYA2cYnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrGJgDaxiYD2sYmANrG
        Jknaxif/2cQg++HQS//s4In/4dFO/9rGJP/ZxCD/2sYl/9rGJv/axib/2sYm/9rGJv3axib+2sYm79rG
        JuHaxiar2sYmKdrGJgDaxiYC2sYmANrGJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2sYmANrG
        JgDaxiYC2sYmANrGJqfaxif/2cUh+eDPSf7q3oH/6d17/+bYaf/cyC//2sUk/9rGJv/axib62sYm/9rG
        JtLaxiYV2sYmBdvGJgDaxiYB2sYmAdrGJgDaxiYA2sYmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADaxiUA2sYmANrGJgHaxiYA2sYmDdrGJsPaxif/2cQg/NvILPvh0U7849NY/NvILPzaxiX72sYm/NrG
        Jv/axibm2sYmKtrGJgDaxiYC2sYmA9rGJgLaxiYA2sYmANrGJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADaxiYA2sYmANrGJgHaxCAA2sYmCdrGJpTaxif82sYk/9nEH//ZxB//2sYl/9rG
        Jv7axib/2sYmudrGJh7axiYA2sYmA9rGJgHaxiYA2sYmANrGJgDaxiYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANvHJwDaxiYA2sYmANrGJgHaxiYC2sYlANrGJiXaxid52scordrH
        KL7axia02sYmitrGJjraxScA2sYmAdrGJgLaxiYA2sYmANrGJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrGJgDaxiYA2sYmANrGJgHaxiYD2sYmANvG
        JwDaxiYAAAAAANrFJQDaxiYA2sYmANrGJgLaxiYC2sYmANrGJgDaxiYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/SGEv//0L//9AAC//QAAv/yAAT/9JCS//QQgv//0L///9C//0AAACyX0
        L6RIAAASoAAABUAAAAKAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABQAAAAqAAAAVIAAASpAAAJdIA
        ACfyAABX8QABL/kABF/6gAi//SAl//6TS/8=
</value>
  </data>
</root>