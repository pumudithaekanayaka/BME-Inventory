<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        V//RCJ//6Alf//0g3/8=
</value>
  </data>
</root>